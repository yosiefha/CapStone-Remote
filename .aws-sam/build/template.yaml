AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Hospital Management Service

  '
Parameters:
  CognitoDomain:
    Type: String
    Description: A name for the Cognito Domain
  S3Bucket:
    Type: String
    Description: Parameter to specify the S3 Bucket to use for deployment
  FrontendDeployment:
    Default: remote
    Type: String
    AllowedValues:
    - local
    - remote
    ConstraintDescription: Must specify 'local' or 'remote' for FrontendDeployment.
Conditions:
  DeployCloudFront:
    Fn::Equals:
    - Ref: FrontendDeployment
    - remote
Globals:
  Function:
    Timeout: 20
  Api:
    Cors:
      AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
      AllowHeaders: '''content-type,authorization'''
      AllowOrigin: '''*'''
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      AddDefaultAuthorizerToCorsPreflight: false
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn:
            Fn::GetAtt:
            - UserPool
            - Arn
Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
        - Name: verified_email
          Priority: 1
      UsernameAttributes:
      - email
      UsernameConfiguration:
        CaseSensitive: false
      AutoVerifiedAttributes:
      - email
      UserPoolName:
        Fn::Sub: ${CognitoDomain}-user-pool
      Schema:
      - Name: email
        AttributeDataType: String
        Mutable: false
        Required: true
      - Name: name
        AttributeDataType: String
        Mutable: true
        Required: true
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: UserPool
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
      - http://localhost:8000
      - Fn::If:
        - DeployCloudFront
        - Fn::Sub: https://${CloudfrontDistribution.DomainName}
        - Ref: AWS::NoValue
      LogoutURLs:
      - http://localhost:8000
      - Fn::If:
        - DeployCloudFront
        - Fn::Sub: https://${CloudfrontDistribution.DomainName}
        - Ref: AWS::NoValue
      AllowedOAuthFlows:
      - code
      - implicit
      AllowedOAuthScopes:
      - phone
      - email
      - openid
      - profile
      SupportedIdentityProviders:
      - COGNITO
      PreventUserExistenceErrors: ENABLED
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain:
        Ref: CognitoDomain
      UserPoolId:
        Ref: UserPool
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Condition: DeployCloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Serverless frontend website
  CloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: DeployCloudFront
    Properties:
      DistributionConfig:
        Comment: Cloudfront distribution for serverless website
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        Origins:
        - Id: s3-website
          DomainName:
            Fn::Sub: ${S3Bucket}.s3.us-east-2.amazonaws.com
          OriginPath: /static
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        DefaultCacheBehavior:
          Compress: 'true'
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployCloudFront
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: s3:GetObject
          Resource:
          - Fn::Sub: arn:aws:s3:::${S3Bucket}/*
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                ${CloudFrontOriginAccessIdentity}
  AccessRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: WriteToCloudWatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - cloudwatch:PutMetricData
            Resource: '*'
      - PolicyName: AccessPatientTable
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: dynamodb:*
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/patients
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/patients/index/SearchByNameIndex
      - PolicyName: AccessDiagnosisTable
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: dynamodb:*
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/diagnoses
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/diagnoses/index/SearchByPatientIdIndex
      - PolicyName: AccessMedicationTable
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: dynamodb:*
            Resource:
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/medications
            - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/medications/index/SearchByPatientIdIndex
  AddPatientToPatientsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: AddPatientToPatientsLambda
      Handler: com.nashss.se.hms.lambda.AddPatientToPatientsLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /patients
            Method: post
    Metadata:
      SamResourceId: AddPatientToPatientsLambda
  SearchPatientByNameLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: SearchPatientByNameLambda
      Handler: com.nashss.se.hms.lambda.SearchPatientByNameLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /patients/search/{firstName}/{lastName}
            Method: get
    Metadata:
      SamResourceId: SearchPatientByNameLambda
  CreatePatientDiagnosisLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: CreatePatientDiagnosisLambda
      Handler: com.nashss.se.hms.lambda.CreatePatientDiagnosisLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /diagnoses
            Method: POST
    Metadata:
      SamResourceId: CreatePatientDiagnosisLambda
  CreatePatientMedicationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: CreatePatientMedicationLambda
      Handler: com.nashss.se.hms.lambda.CreatePatientMedicationLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /medications
            Method: POST
    Metadata:
      SamResourceId: CreatePatientMedicationLambda
  GetPatientByPatientIdLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: GetPatientByPatientIdLambda
      Handler: com.nashss.se.hms.lambda.GetPatientByPatientIdLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /patients/{patientId}
            Method: GET
    Metadata:
      SamResourceId: GetPatientByPatientIdLambda
  GetDiagnosisDetailsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: GetDiagnosisDetailsLambda
      Handler: com.nashss.se.hms.lambda.GetDiagnosisDetailsLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /patients/{patientId}/diagnoses
            Method: GET
    Metadata:
      SamResourceId: GetDiagnosisDetailsLambda
  GetMedicationDetailsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: GetMedicationDetailsLambda
      Handler: com.nashss.se.hms.lambda.GetMedicationDetailsLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /patients/{patientId}/medications
            Method: GET
    Metadata:
      SamResourceId: GetMedicationDetailsLambda
  DeletePatientLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: DeletePatientLambda
      Handler: com.nashss.se.hms.lambda.DeletePatientLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /patients/{patientId}
            Method: delete
    Metadata:
      SamResourceId: DeletePatientLambda
  DeleteDiagnosisLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: DeleteDiagnosisLambda
      Handler: com.nashss.se.hms.lambda.DeleteDiagnosisLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /diagnoses/{diagnosisId}
            Method: delete
    Metadata:
      SamResourceId: DeleteDiagnosisLambda
  DeleteMedicationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: DeleteMedicationLambda
      Handler: com.nashss.se.hms.lambda.DeleteMedicationLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /medications/{medicationId}
            Method: delete
    Metadata:
      SamResourceId: DeleteMedicationLambda
  UpdatePatientLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: UpdatePatientLambda
      Handler: com.nashss.se.hms.lambda.UpdatePatientLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /patients/{patientId}
            Method: PUT
    Metadata:
      SamResourceId: UpdatePatientLambda
  UpdateMedicationLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: UpdateMedicationLambda
      Handler: com.nashss.se.hms.lambda.UpdateMedicationLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /medications
            Method: PUT
    Metadata:
      SamResourceId: UpdateMedicationLambda
  UpdateDiagnosisLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role:
        Fn::GetAtt:
        - AccessRole
        - Arn
      CodeUri: UpdateDiagnosisLambda
      Handler: com.nashss.se.hms.lambda.UpdateDiagnosisLambda::handleRequest
      Runtime: java11
      Architectures:
      - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PatientRecordService:
          Type: Api
          Properties:
            Path: /diagnoses
            Method: PUT
    Metadata:
      SamResourceId: UpdateDiagnosisLambda
  PatientTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: patientId
        AttributeType: S
      - AttributeName: firstName
        AttributeType: S
      - AttributeName: lastName
        AttributeType: S
      KeySchema:
      - AttributeName: patientId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: patients
      GlobalSecondaryIndexes:
      - IndexName: SearchByNameIndex
        KeySchema:
        - AttributeName: lastName
          KeyType: HASH
        - AttributeName: firstName
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
  DiagnosisTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: diagnosisId
        AttributeType: S
      - AttributeName: patientId
        AttributeType: S
      KeySchema:
      - AttributeName: diagnosisId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: diagnoses
      GlobalSecondaryIndexes:
      - IndexName: SearchByPatientIdIndex
        KeySchema:
        - AttributeName: patientId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  MedicationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
      - AttributeName: medicationId
        AttributeType: S
      - AttributeName: patientId
        AttributeType: S
      KeySchema:
      - AttributeName: medicationId
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TableName: medications
      GlobalSecondaryIndexes:
      - IndexName: SearchByPatientIdIndex
        KeySchema:
        - AttributeName: patientId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
Outputs:
  CognitoUserPoolId:
    Value:
      Ref: UserPool
    Description: The Cognito User Pool ID (COGNITO_USER_POOL_ID).
  CognitoUserPoolClientId:
    Value:
      Ref: UserPoolClient
    Description: The Cognito User Pool Client ID (COGNITO_USER_POOL_CLIENT_ID).
  CognitoDomain:
    Value:
      Fn::Sub: ${CognitoDomain}.auth.us-east-2.amazoncognito.com
    Description: The Cognito Domain (COGNITO_DOMAIN).
  ApiBaseUrl:
    Description: API Gateway endpoint base URL for Prod stage (API_BASE_URL).
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  CognitoRedirectSignin:
    Description: The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNIN).
    Value:
      Fn::Sub: https://${CloudfrontDistribution.DomainName}
    Condition: DeployCloudFront
  CognitoRedirectSignout:
    Description: The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNOUT).
    Value:
      Fn::Sub: https://${CloudfrontDistribution.DomainName}
    Condition: DeployCloudFront
